var forest = /* color: #98ff00 */ee.Feature(
        ee.Geometry.MultiPolygon(
            [[[[-70.20217529832318, -2.464879027515797],
               [-68.20815674363568, -2.5417099297522214],
               [-68.34548584519818, -1.9104759996981349],
               [-70.16372314988568, -1.7567462079891683]]],
             [[[-58.34792725144819, 1.5237119140159845],
               [-58.45779053269819, 0.29342151557901797],
               [-56.69997803269819, 0.8756640976409689]]],
             [[[-54.57659222995308, -7.14230108783513],
               [-54.61779096042183, -7.567241677665348],
               [-53.80480267917183, -7.281268583711635]]],
             [[[-60.133104097618904, -10.990277785488033],
               [-60.295152437462654, -11.246305581652024],
               [-59.627733003868904, -11.141226656129723]]],
             [[[-58.690635656010784, -5.019065125655101],
               [-59.086143468510784, -5.959545694322536],
               [-58.031455968510784, -5.36918344652985]]],
             [[[-50.810781113986266, -5.72350635927843],
               [-50.821767442111266, -6.051357272327286],
               [-50.552602403048766, -5.892920159350811]]]]),
        {
          "class": 0,
          "system:index": "0"
        }),
    forestGain = /* color: #0b4a8b */ee.Feature(
        ee.Geometry.MultiPolygon(
            [[[[-46.1614866207793, -17.91614305289174],
               [-46.15324687468555, -17.976240914773626],
               [-46.1065549801543, -18.004976146451817],
               [-46.1120481442168, -17.93182272385979]]],
             [[[-48.864285588248265, -19.326497460898118],
               [-48.861539006217015, -19.340427827478884],
               [-48.844029545767796, -19.349174194381668],
               [-48.81347382067014, -19.335244574083113],
               [-48.84196960924436, -19.322933687905774]]],
             [[[-48.833043217642796, -19.432403154666417],
               [-48.81896698473264, -19.442763312317286],
               [-48.81278717516233, -19.43078432032273]]],
             [[[-51.6949051690474, -20.115296086769725],
               [-51.71413124326615, -20.14172908744616],
               [-51.63104713682084, -20.155910805518925],
               [-51.670872576273965, -20.117875112828983]]],
             [[[-51.74159706357865, -19.939822804551195],
               [-51.756016619242715, -19.924330476513177],
               [-51.772496111430215, -19.930140277536438]]],
             [[[-51.60358131650834, -20.127546081796588],
               [-51.60358131650834, -20.10046586194975],
               [-51.6180008721724, -20.095952036371102]]],
             [[[-51.541783220805215, -20.076605596235083],
               [-51.54521644834428, -20.099176210776434],
               [-51.519810564555215, -20.090148355165795]]],
             [[[-52.95009315732865, -20.78273125347067],
               [-52.945286638773965, -20.801347157352392],
               [-52.93018043760209, -20.79300238100266],
               [-52.90752113584428, -20.800705267868448],
               [-52.925030596293496, -20.761223817155113],
               [-52.93945015195756, -20.760581757068003],
               [-52.957989580668496, -20.774385447762956]]],
             [[[-52.97412575010209, -20.766039180863732],
               [-52.99163521055131, -20.78497812234338],
               [-52.98408210996537, -20.79236045601106],
               [-52.953526384867715, -20.764113053792975],
               [-52.96760261777787, -20.753839961496087]]]]),
        {
          "class": 3,
          "system:index": "0"
        }),
    geometry = /* color: #ffc82d */ee.Geometry.MultiPoint(
        [[-76.50835458536956, 8.105390649694558],
         [-63.41265146036957, 10.706423913636009],
         [-52.68999521036957, 5.487434571128815],
         [-40.38530771036957, -10.1825507894405],
         [-53.48101083536957, -25.043365283231353],
         [-75.54155771036956, -14.389523313576998],
         [-80.11187021036956, -0.0412664853766165]]),
    forestLoss = /* color: #ff0000 */ee.Feature(
        ee.Geometry.MultiPolygon(
            [[[[-45.63486982802087, -13.396298675002528],
               [-45.61564375380212, -13.488459797817297],
               [-45.52637983778649, -13.468427787006185],
               [-45.54835249403649, -13.365570440779612],
               [-45.58268476942712, -13.39095491593933],
               [-45.57307173231774, -13.456407775174311],
               [-45.59916426161462, -13.451065353980079],
               [-45.60877729872399, -13.405649967721944]]],
             [[[-45.90511216577354, -11.308699433357043],
               [-45.93944444116416, -11.231931353109674],
               [-46.08226670678916, -11.281765599898481]]],
             [[[-64.22387092558593, -9.75076774211405],
               [-64.39965217558593, -10.394375409587033],
               [-63.61962287871092, -10.480811683390897],
               [-63.74596565214842, -9.64247405020789]]],
             [[[-75.18732956833632, -8.388829077679324],
               [-75.45649460739882, -8.915600204640704],
               [-75.05549363083632, -8.752760312153962],
               [-74.99506882614882, -8.486635765835478]]],
             [[[-50.70068404127321, -4.796672456028251],
               [-50.74737593580446, -5.1031420193792165],
               [-50.48919722486696, -5.155118113694302],
               [-50.44250533033571, -4.777513448520163]]]]),
        {
          "class": 1,
          "system:index": "0"
        }),
    nonforest = /* color: #000000 */ee.Feature(
        ee.Geometry.MultiPolygon(
            [[[[-66.41588137262924, -12.946408122892706],
               [-66.83336184137924, -14.131977531313343],
               [-65.32823488825424, -13.865476644605945]]],
             [[[-50.58647129797417, -16.26286221378241],
               [-50.48759434484917, -16.821035524396223],
               [-50.21293614172417, -16.13626074405312]]],
             [[[-50.782260170637464, -19.57034139516293],
               [-50.980014076887464, -20.560993740620425],
               [-49.755038490949964, -20.20054447021476]]],
             [[[-51.04922740114907, -10.862561072148642],
               [-51.05746714724282, -10.888859260299498],
               [-51.03068797243813, -10.876047612185369]]]]),
        {
          "class": 2,
          "system:index": "0"
        }),
    han = ee.Image("UMD/hansen/global_forest_change_2018_v1_6");

var geo = geometry.geometries();

var rainforest = ee.Geometry.Polygon([
  [geo.get(0), geo.get(1), geo.get(2), geo.get(3), geo.get(4), geo.get(5), geo.get(6)]
]);
Map.centerObject(rainforest, 5);

var ls5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_TOA')
                  .filterDate('2008-01-01', '2008-12-31')
                  .filterBounds(rainforest);

var ls7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')
                  .filterDate('2018-01-01', '2018-12-31')
                  .filterBounds(rainforest); 

var treeCover = han.select(['treecover2000']);
var lossImage = han.select(['loss']);
var gainImage = han.select(['gain']);

// Add the tree cover layer in green.
Map.addLayer(treeCover.updateMask(treeCover),
    {palette: ['000000', '00FF00'], max: 100}, 'Hansen Forest Cover');

// Add the gain layer in blue.
Map.addLayer(gainImage.updateMask(gainImage),
            {palette: ['0000FF']}, 'Hansen Gain');

// Add the loss layer in red.
Map.addLayer(lossImage.updateMask(lossImage),
            {palette: ['FF0000']}, 'Hansen Loss');


                  

Map.addLayer(ls5, {bands: ['B3', 'B2', 'B1'], gamma: 1.5}, '2008');
Map.addLayer(ls7, {bands: ['B3', 'B2', 'B1'], gamma: 1.5}, '2018');
// Map.addLayer(han, 'hansen')

var removeCloudCoverLSF = function(img){
    if (img.bandNames().indexOf('fmask') > -1) {  
      var mask = img.select('fmask').lt(2);
      img = img.select(['B1', 'B2', 'B3', 'B4', 'B5']).rename(['B1_2008', 'B2_2008', 'B3_2008', 'B4_2008', 'B5_2008']);
      img = img.updateMask(mask);
      return img;
    } else {
      img = img.select(['B1', 'B2', 'B3', 'B4', 'B5']).rename(['B1_2008', 'B2_2008', 'B3_2008', 'B4_2008', 'B5_2008']);
      return img;
    }
};
var removeCloudCoverLSS = function(img){
    if (img.bandNames().indexOf('fmask') > -1) {  
      var mask = img.select('fmask').lt(2);
      img = img.select(['B1', 'B2', 'B3', 'B4', 'B5']).rename(['B1_2018', 'B2_2018', 'B3_2018', 'B4_2018', 'B5_2018']);
      img = img.updateMask(mask);
      return img;
    } else {
      img = img.select(['B1', 'B2', 'B3', 'B4', 'B5']).rename(['B1_2018', 'B2_2018', 'B3_2018', 'B4_2018', 'B5_2018']);
      print('3');
      return img;
    }
};

ls5 = ls5.map(removeCloudCoverLSF);
ls7 = ls7.map(removeCloudCoverLSS);

var medLS5 = ls5.reduce(ee.Reducer.median());
var medLS7 = ls7.reduce(ee.Reducer.median());

Map.addLayer(medLS5, {bands: ['B3_2008_median', 'B2_2008_median', 'B1_2008_median'], gamma: 1.5}, 'Cloud Cover 2008');
Map.addLayer(medLS7, {bands: ['B3_2018_median', 'B2_2018_median', 'B1_2018_median'], gamma: 1.5}, 'Cloud Cover 2018');

var combined = medLS7.addBands(medLS5);
Map.addLayer(combined, {bands: ['B5_2018_median', 'B5_2008_median', 'B5_2008_median'], gamma: 1.5}, 'combined');

// subsample training polygons with random points
// this ensures all classes have same sample size
// also EE can't handle too many cells at once
var trainingLayers = [forest, forestLoss, nonforest, forestGain];
var n = 500;
// loop over training layers
for (var i = 0; i < trainingLayers.length; i++) { 
  // sample points within training polygons
  var pts = ee.FeatureCollection
    .randomPoints(trainingLayers[i].geometry(), n);
  // add class
  var thisClass = trainingLayers[i].get('class');
  pts = pts.map(function(f) {
    return f.set({class: thisClass});
  });
  // extract raster cell values
  var training = combined.sampleRegions(pts, ['class'], 30);
  // combine trainging regions together
  if (i === 0) {
    var trainingData = training;
  } else {
    trainingData = trainingData.merge(training);
  }
}

//// classify with random forests
// use bands 1-5 from each time period
var bands = ['B1_2008_median', 'B1_2018_median', 'B2_2008_median', 'B2_2018_median', 'B3_2008_median', 'B3_2018_median',
             'B4_2008_median', 'B4_2018_median', 'B5_2008_median', 'B5_2018_median'];
// fit a random forests model
var classifier = ee.Classifier.smileRandomForest(9)
  .train(trainingData, 'class', bands);
// produce the forest change map
var classified = combined.classify(classifier);
var p = ['00ff00', 'ff0000', '000000', '0000ff'];
// display
Map.addLayer(classified, {palette: p, min: 0, max: 3}, 'classification');

// accuracy assessement
var confMat = classifier.confusionMatrix();
print('Confusion matrix: ', confMat);
print('Overall accuracy: ', confMat.accuracy());



